---
title: "ECON 470 Homework 5-2 Answers"
author: "Ilse Novis"
due date: "4/28/2025"
format: pdf
jupyter: base
execute:
  echo: false
header-includes:
  - \usepackage{setspace}
  - \usepackage{graphicx}
  - \usepackage{booktabs}
  - \usepackage{caption}
  - \usepackage{lmodern}
  - \usepackage{hyperref}
  - \hypersetup{colorlinks=true,urlcolor=blue}
---
::: {.latex}
\begin{center}
Github Repository: https://github.com/ilsenovis18/ECON470HW5
\end{center}
:::

::: {.latex}
\newpage
\thispagestyle{empty}
\vspace*{\fill}
\begin{center}
    \Huge \textbf{Summary Statistics}
\end{center}
\vspace*{\fill}
\newpage
:::

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
import patsy
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import re
warnings.filterwarnings("ignore", message=".*Variables have been fully absorbed.*")
```

```{python}
# Load merged data
df = pd.read_csv('/Users/ilsenovis/Documents/GitHub/ECON470HW5/data/output/acs_medicaid.txt', sep='\t')
```

## **Question 1:** Plot the share of the adult population with direct purchase health insurance over time.

```{python}
df['share_direct'] = df['ins_direct'] / df['adult_pop']

# Group by year and calculate average share
trend = df.groupby('year', as_index=False)['share_direct'].mean()

# Plot
plt.figure(figsize=(8, 5))
plt.plot(trend['year'], trend['share_direct'], marker='o', linestyle='-', color='steelblue')
plt.title("Average Share of Adults with Direct Purchase Insurance (2012–2018)")
plt.xlabel("Year")
plt.ylabel("Share with Direct Purchase Insurance")
plt.grid(True)
plt.tight_layout()
plt.show()
```


::: {.latex}
\newpage
:::

## **Question 2:** Discuss the reduction in direct purchase health insurance in later years. Can you list a couple of policies that might have affected the success of the direct purchase insurance market?

1. Repeal of the Individual Mandate Penalty (Effective 2019)
	
	- Though passed in late 2017 (Tax Cuts and Jobs Act), anticipation of the penalty’s removal may have influenced enrollment decisions in 2018.
	
	- Without a tax penalty, some healthy individuals likely opted out of buying coverage, causing a decline in enrollment and rising premiums for those who remained.

2. Cutbacks in ACA Outreach and Enrollment Support
	
	- The federal government significantly reduced funding for advertising and navigator programs during Open Enrollment periods (starting in 2017).
	
	- This made it harder for new enrollees to access information or get assistance, particularly impacting low-income or tech-averse individuals.

3. Expansion of Non-ACA-Compliant Plans
	
	- In 2018, the Trump administration expanded the availability of short-term, limited-duration insurance plans.
	
	- These plans are often cheaper but lack essential health benefits and consumer protections, drawing healthier individuals away from ACA-compliant markets and increasing risk-pooling issues.


::: {.latex}
\newpage
:::

## **Question 3:** Plot the share of the adult population with Medicaid over time.

```{python}
df['share_medicaid'] = df['ins_medicaid'] / df['adult_pop']

# Group by year and calculate average share
medicaid_trend = df.groupby('year', as_index=False)['share_medicaid'].mean()

# Plot
plt.figure(figsize=(8, 5))
plt.plot(medicaid_trend['year'], medicaid_trend['share_medicaid'], marker='o', linestyle='-', color='darkgreen')
plt.title("Average Share of Adults with Medicaid Coverage (2012–2018)")
plt.xlabel("Year")
plt.ylabel("Share with Medicaid")
plt.grid(True)
plt.tight_layout()
plt.show()
```


::: {.latex}
\newpage
:::

## **Question 4:** Plot the share of uninsured over time, separately by states that expanded Medicaid in 2014 versus those that did not. Drop all states that expanded after 2014.

```{python}
# Q4:

# Identify states that expanded in 2014 or never expanded
expansion_2014_states = df[df['expand_year'] == 2014]['State'].unique()
never_expanded_states = df[df['expand_ever'] == False]['State'].unique()

# Combine into one list
keep_states = list(set(expansion_2014_states).union(set(never_expanded_states)))

# Filter dataset
filtered_df = df[df['State'].isin(keep_states)].copy()

# Assign group labels
filtered_df['expansion_group'] = filtered_df['State'].apply(
    lambda x: 'Expanded in 2014' if x in expansion_2014_states else 'Did Not Expand'
)

# Calculate share of uninsured by group and year
uninsured_trend = (
    filtered_df.groupby(['year', 'expansion_group'])['uninsured']
    .sum()
    .div(filtered_df.groupby(['year', 'expansion_group'])['adult_pop'].sum())
    .reset_index(name='share_uninsured')
)

# Plot
plt.figure(figsize=(8, 5))
for label, grp in uninsured_trend.groupby('expansion_group'):
    plt.plot(grp['year'], grp['share_uninsured'], marker='o', label=label)

plt.title("Uninsured Rate Over Time by Medicaid Expansion Status")
plt.xlabel("Year")
plt.ylabel("Share Uninsured")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```

::: {.latex}
\newpage
\thispagestyle{empty}
\vspace*{\fill}
\begin{center}
    \Huge \textbf{Estimate ATEs}
\end{center}
\vspace*{\fill}
\newpage
:::

## **Question 5:** Calculate the average percent of uninsured individuals in 2012 and 2015, separately for expansion and non-expansion states. Present your results in a basic 2x2 DD table.

```{python}
# Filter to 2012 and 2015
df_dd = df[df['year'].isin([2012, 2015])].copy()

# Define expansion and non-expansion states
expansion_2014_states = df[df['expand_year'] == 2014]['State'].unique()
never_expanded_states = df[df['expand_ever'] == False]['State'].unique()
keep_states = list(set(expansion_2014_states).union(set(never_expanded_states)))

# Filter for relevant states
df_dd = df_dd[df_dd['State'].isin(keep_states)].copy()

# Assign group label
df_dd['group'] = df_dd['State'].apply(
    lambda x: 'Expanded' if x in expansion_2014_states else 'Not Expanded'
)

# Group and calculate average uninsurance rate
ate_table = (
    df_dd.groupby(['group', 'year'])[['uninsured', 'adult_pop']]
    .sum()
    .reset_index()
)
ate_table['uninsured_rate'] = ate_table['uninsured'] / ate_table['adult_pop']

# Pivot table for 2x2 layout
dd_pivot = ate_table.pivot(index='group', columns='year', values='uninsured_rate')
dd_pivot['Change'] = dd_pivot[2015] - dd_pivot[2012]

# Compute DiD estimate
did_estimate = dd_pivot.loc['Expanded', 'Change'] - dd_pivot.loc['Not Expanded', 'Change']
```

\begin{table}[h]
\centering
\caption{Difference-in-Differences Table for Uninsurance Rates (2012–2015)}
\begin{tabular}{lccc}
\hline
Group & 2012 & 2015 & Change \\
\hline
Expanded & 0.1865 & 0.1019 & -0.0846 \\
Not Expanded & 0.2473 & 0.1804 & -0.0669 \\
\hline
\end{tabular}
\end{table}
\textbf{Estimated Average Treatment Effect (DiD):} $-0.0177$

::: {.latex}
\newpage
:::

```{python}
# Q6: Estimate the effect of Medicaid expansion on the uninsurance rate using a standard DD regression estimator, again focusing only on states that expanded in 2014 versus those that never expanded.

# Restrict to 2014 expanders and never expanders only
expansion_2014_states = df[df['expand_year'] == 2014]['State'].unique()
never_expanded_states = df[df['expand_ever'] == False]['State'].unique()
keep_states = list(set(expansion_2014_states).union(set(never_expanded_states)))
df_subset = df[df['State'].isin(keep_states)].copy()

df_reg = df_subset.copy()

# Create treatment and post indicators
df_reg['treatment'] = df_reg['State'].apply(lambda x: 1 if x in expansion_2014_states else 0)
df_reg['post'] = (df_reg['year'] >= 2014).astype(int)
df_reg['interaction'] = df_reg['treatment'] * df_reg['post']
df_reg['uninsured_rate'] = df_reg['uninsured'] / df_reg['adult_pop']

# Fit OLS DiD model
model = smf.ols('uninsured_rate ~ treatment + post + interaction', data=df_reg).fit()

# Extract ATE
ate_dd = model.params['interaction']
```

```{python}
# Q7: Include state and year fixed effects in your estimates.
df_fe = df_subset.copy()

# Create DiD variables
df_fe['treatment'] = df_fe['State'].apply(lambda x: 1 if x in expansion_2014_states else 0)
df_fe['post'] = (df_fe['year'] >= 2014).astype(int)
df_fe['interaction'] = df_fe['treatment'] * df_fe['post']
df_fe['uninsured_rate'] = df_fe['uninsured'] / df_fe['adult_pop']

# Set panel index
df_fe = df_fe.set_index(['State', 'year'])

# Run fixed effects DiD regression
model_fe = PanelOLS.from_formula(
    'uninsured_rate ~ interaction + EntityEffects + TimeEffects',
    data=df_fe
).fit()
```


## **Question 6:** Estimate the effect of Medicaid expansion on the uninsurance rate using a standard DD regression estimator, again focusing only on states that expanded in 2014 versus those that never expanded.

## **Question 7:** Include state and year fixed effects in your estimates.

## **Question 8:** Repeat the analysis in question 7 but include all states (even those that expanded after 2014). Are your results different? If so, why?

```{python}
df_all = df.copy()

# Fill missing expand_ever values with False (for Puerto Rico and others)
df_all['expand_ever'] = df_all['expand_ever'].fillna(False)

# Create treatment indicator: 1 if state ever expanded, else 0
df_all['treatment'] = df_all['expand_ever'].astype(int)

# Create post indicator: 1 if year >= 2014
df_all['post'] = (df_all['year'] >= 2014).astype(int)

# Interaction term
df_all['interaction'] = df_all['treatment'] * df_all['post']

# Uninsured rate outcome
df_all['uninsured_rate'] = df_all['uninsured'] / df_all['adult_pop']

# Drop rows with missing values in outcome or covariates
df_all = df_all.dropna(subset=['uninsured_rate', 'interaction'])

# Set panel index
df_all = df_all.set_index(['State', 'year'])

# Estimate DiD with fixed effects
model_q8 = PanelOLS.from_formula(
    'uninsured_rate ~ interaction + EntityEffects + TimeEffects',
    data=df_all
).fit()

# Extract ATE
ate_q8 = model_q8.params['interaction']
```

\begin{table}[ht]
\centering
\caption{ATE Estimates from Difference-in-Differences Models (Q6–Q8)}
\begin{tabular}{lccc}
\hline
 & Q6: OLS DiD & Q7: DiD w/ FE (2014 vs. Never) & Q8: DiD w/ FE (All States) \\
\hline
\textbf{Interaction (ATE)} & -0.0188 & -0.0188 & -0.0204 \\
Standard Error & (0.0103) & (0.0035) & (0.0035) \\
P-value & 0.069 & 0.000 & 0.000 \\
R$^2$ & 0.506 & 0.252 & 0.279 \\
Observations & 352 & 352 & 416 \\
States & 44 & 44 & 52 \\
Time Effects & Yes & Yes & Yes \\
State Effects & No & Yes & Yes \\
\hline
\end{tabular}
\end{table}

### **Are the results of Question 8 different from Question 7? If so, why?**

Yes, the estimated average treatment effect (ATE) changed slightly when all states were included. In Question 7, the ATE from the DiD model with state and year fixed effects was **–0.0188**, using only states that expanded Medicaid in 2014 or never expanded. In Question 8, after including **all states**—including those that expanded after 2014—the ATE became slightly larger in magnitude at **–0.0204**.

#### **Why did this happen?**
- **States that expanded after 2014** (e.g., Louisiana, Virginia, Montana) were counted as untreated in the earlier years but began contributing to the treated group later in the 2012–2018 window.
- These **late adopters introduce additional post-treatment variation**, reinforcing the observed decline in uninsured rates associated with Medicaid expansion.
- Including these states **strengthens the estimated treatment effect**, as it captures more within-state changes due to expansion during the sample period.

---

### **Summary**
The inclusion of all states resulted in a **more negative ATE** (–0.0204 vs. –0.0188), indicating a slightly stronger effect of Medicaid expansion. This is likely because **late-expanding states began to experience coverage gains** during the observation period, which further supports the expansion’s impact on reducing uninsurance.

::: {.latex}
\newpage
:::

## **Question 9:** Provide an “event study” graph showing the effects of Medicaid expansion in each year. Use the specification that includes state and year fixed effects, limited to states that expanded in 2014 or never expanded.

```{python}
# Subset to 2014 expanders or non-expanders only
event_df = df[df['State'].isin(keep_states)].copy()
event_df = event_df.sort_values(['State', 'year'])

# Create event time: years since expansion (0 = 2014)
event_df['event_time'] = event_df['year'] - event_df['expand_year']

# For never-expanded states, assign placeholder event_time
event_df.loc[event_df['expand_year'].isna(), 'event_time'] = -99

# Create dummies for event years -3 to 4, excluding 0 and -99
event_dummies = []
for t in range(-3, 5):
    if t == 0 or t == -1:
        continue
    col = f"event_m{abs(t)}" if t < 0 else f"event_p{t}"
    event_df[col] = (event_df['event_time'] == t).astype(int)
    event_dummies.append(col)

# Calculate uninsurance rate
event_df['uninsured_rate'] = event_df['uninsured'] / event_df['adult_pop']

# Set panel index
event_df = event_df.set_index(['State', 'year'])

# Run panel regression with event-time dummies and fixed effects
from linearmodels.panel import PanelOLS

formula = f"uninsured_rate ~ {' + '.join(event_dummies)} + EntityEffects + TimeEffects"
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    event_model = PanelOLS.from_formula(
        formula, data=event_df, check_rank=False, drop_absorbed=True
    ).fit()

# Extract coefficients and standard errors
coefs = event_model.params.filter(like='event_')
errors = event_model.std_errors[coefs.index]

# Convert dummy names to numeric event time
def convert_dummy_name(name):
    val = name.split('_')[1]
    return -int(val[1:]) if val.startswith('m') else int(val[1:])

years = [convert_dummy_name(name) for name in coefs.index]

# Sort estimates
sorted_pairs = sorted(zip(years, coefs, errors))
years, coefs, errors = zip(*sorted_pairs)

# Clip extreme values
coefs = pd.Series(coefs).clip(lower=-0.2, upper=0.2)
errors = pd.Series(errors).clip(upper=0.2)

# Convert event years to actual calendar years
calendar_years = [2014 + yr for yr in years]

# Plot
plt.figure(figsize=(10, 5))
plt.errorbar(calendar_years, coefs, yerr=1.96 * errors, fmt='o-', capsize=4, label='Estimated Effect')
plt.axhline(0, linestyle='--', color='gray')
plt.title("Q9: Event Study – Effect of Medicaid Expansion on Uninsurance")
plt.xlabel("Calendar Year")
plt.ylabel("Estimated Effect on Uninsured Rate")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```

::: {.latex}
\newpage
:::

## **Question 10:** Repeat part 9 but again include states that expanded after 2014. Note: this is tricky…you need to put all states onto “event time” to create this graph.

```{python}
# Copy and prepare data
event_df_q10 = df.copy()
event_df_q10 = event_df_q10.sort_values(['State', 'year'])

# Create event time: years since Medicaid expansion
event_df_q10['event_time'] = event_df_q10['year'] - event_df_q10['expand_year']

# Assign placeholder for never-expanded states
event_df_q10.loc[event_df_q10['expand_year'].isna(), 'event_time'] = -99

# Recalculate uninsurance rate
event_df_q10['uninsured_rate'] = event_df_q10['uninsured'] / event_df_q10['adult_pop']

# Drop NAs and infinities
event_df_q10 = event_df_q10[event_df_q10['uninsured_rate'].notna()]
event_df_q10 = event_df_q10[~event_df_q10['uninsured_rate'].isin([float('inf'), float('-inf')])]

# Create dummies for event years from -3 to +4, excluding 0 and -99
event_cols_q10 = []
for t in range(-3, 5):
    if t == 0:
        continue
    label = f'event_m{abs(t)}' if t < 0 else f'event_p{t}'
    event_df_q10[label] = (event_df_q10['event_time'] == t).astype(int)
    event_cols_q10.append(label)

# Drop the reference year (usually -1 or 0) from the regression
# In this version, we use `event_m1` as the reference, so we exclude it
event_cols_q10 = [col for col in event_cols_q10 if col != 'event_m1']

# Build regression formula
event_terms_q10 = ' + '.join(event_cols_q10)
formula_q10 = f'uninsured_rate ~ {event_terms_q10} + EntityEffects + TimeEffects'

# Set panel index
event_df_q10 = event_df_q10.set_index(['State', 'year'])

# Run regression
event_model_q10 = PanelOLS.from_formula(formula_q10, data=event_df_q10, check_rank=False, drop_absorbed=True).fit()

# Extract coefficients and errors
coefs_q10 = event_model_q10.params.filter(like='event_')
errors_q10 = event_model_q10.std_errors[coefs_q10.index]

# Convert names to event time values
def convert_event_name(name):
    if "m" in name:
        return -int(name.split('m')[1])
    elif "p" in name:
        return int(name.split('p')[1])
    return None

event_times_q10 = [convert_event_name(name) for name in coefs_q10.index]

# Sort for plotting
sorted_pairs = sorted(zip(event_times_q10, coefs_q10, errors_q10))
years_q10, coefs_q10, errors_q10 = zip(*sorted_pairs)

# Clip for readability
coefs_q10 = pd.Series(coefs_q10).clip(lower=-0.2, upper=0.2)
errors_q10 = pd.Series(errors_q10).clip(upper=0.2)

# Plot
plt.figure(figsize=(10, 5))
plt.errorbar(years_q10, coefs_q10, yerr=1.96 * errors_q10, fmt='o-', capsize=4, label='All States')
plt.axhline(0, linestyle='--', color='gray')
plt.title("Q10: Event Study – All States (Aligned by Expansion Year)")
plt.xlabel("Years Since Medicaid Expansion")
plt.ylabel("Estimated Effect on Uninsured Rate")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```